/*
 * IriusRisk API
 * Products API
 *
 * OpenAPI spec version: 1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import io.swagger.client.ApiException;
import io.swagger.client.model.ComponentControl;
import io.swagger.client.model.ComponentUseCaseThreatShort;
import io.swagger.client.model.ComponentWeakness;
import io.swagger.client.model.CreateProduct;
import io.swagger.client.model.Error;
import java.io.File;
import io.swagger.client.model.InlineResponse200;
import io.swagger.client.model.InlineResponse2001;
import io.swagger.client.model.InlineResponse2011;
import io.swagger.client.model.JsonData13;
import io.swagger.client.model.JsonData14;
import io.swagger.client.model.JsonData15;
import io.swagger.client.model.JsonData16;
import io.swagger.client.model.JsonData17;
import io.swagger.client.model.JsonData18;
import io.swagger.client.model.Product;
import io.swagger.client.model.ProductShort;
import io.swagger.client.model.ProductShortGroups;
import io.swagger.client.model.ProductShortUsers;
import io.swagger.client.model.RiskSummary;
import io.swagger.client.model.UpdateProduct;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ProductsApi
 */
@Ignore
public class ProductsApiTest {

    private final ProductsApi api = new ProductsApi();

    
    /**
     * Gets a list of all products.
     *
     * Gets a list of all products visible by the user who perform the call. Conditions to be able to perform the action:   - No permissions are required to perform this action. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void productsGetTest() throws ApiException {
        String apiToken = null;
        List<ProductShort> response = api.productsGet(apiToken);

        // TODO: test validations
    }
    
    /**
     * Creates a new product
     *
     * Createa a new product. Conditions to be able to perform the action:   - To have the permission **PRODUCT_CREATE** granted. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void productsPostTest() throws ApiException {
        String apiToken = null;
        CreateProduct jsonData = null;
        ProductShort response = api.productsPost(apiToken, jsonData);

        // TODO: test validations
    }
    
    /**
     * Sets the desired status to a countermeasure
     *
     * Sets the desired status to a countermeasure. Possible values are:             - implemented             - recommended             - rejected             - required Conditions to be able to perform the action:   - To have the permission **COUNTERMEASURE_UPDATE** granted to set any state.   - To have the permission **COUNTERMEASURE_SELECT_IMPLEMENTED** granted to set implemented state.   - To have the permission **COUNTERMEASURE_SELECT_RECOMMENDED** granted to set recommended state.   - To have the permission **COUNTERMEASURE_SELECT_REJECTED** granted to set reject state.   - To have the permission **COUNTERMEASURE_SELECT_REQUIRED** granted to set required state. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void productsRefComponentsComponentRefControlsControlRefStatusPutTest() throws ApiException {
        String apiToken = null;
        String ref = null;
        String componentRef = null;
        String controlRef = null;
        JsonData17 jsonData = null;
        api.productsRefComponentsComponentRefControlsControlRefStatusPut(apiToken, ref, componentRef, controlRef, jsonData);

        // TODO: test validations
    }
    
    /**
     * Updates a single test to a component.
     *
     * Updates a single test to a component. Conditions to be able to perform the action:   - To have the permission **TEST_UPDATE** granted. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void productsRefComponentsComponentRefTestsCwePutTest() throws ApiException {
        String apiToken = null;
        String ref = null;
        String componentRef = null;
        String cwe = null;
        JsonData18 jsonData = null;
        List<InlineResponse2001> response = api.productsRefComponentsComponentRefTestsCwePut(apiToken, ref, componentRef, cwe, jsonData);

        // TODO: test validations
    }
    
    /**
     * Imports test results from different sources to a component
     *
     * Imports test results from different sources (OWASP ZAP, Cucumber, Micro Focus Fortify) into the specified component. More than one file can be attached to the call. Conditions to be able to perform the action:   - To have the permission **TEST_UPDATE** granted. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void productsRefComponentsComponentRefTestsTestTypeUploadPostTest() throws ApiException {
        String apiToken = null;
        String ref = null;
        String componentRef = null;
        String testType = null;
        File fileName = null;
        InlineResponse2011 response = api.productsRefComponentsComponentRefTestsTestTypeUploadPost(apiToken, ref, componentRef, testType, fileName);

        // TODO: test validations
    }
    
    /**
     * Gets a list of all product countermeasures
     *
     * Returns a list of all the countermeasures of a product. Conditions to be able to perform the action:   - To have the permission **COUNTERMEASURE_VIEW** granted, or   - To have the permission **COUNTERMEASURE_UPDATE** granted. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void productsRefControlsGetTest() throws ApiException {
        String apiToken = null;
        String ref = null;
        List<ComponentControl> response = api.productsRefControlsGet(apiToken, ref);

        // TODO: test validations
    }
    
    /**
     * Gets a list of all implemented countermeasures of a product.
     *
     * Returns a list of all the implemented countermeasures of a product. Conditions to be able to perform the action:   - To have the permission **COUNTERMEASURE_VIEW** granted, or   - To have the permission **COUNTERMEASURE_UPDATE** granted. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void productsRefControlsImplementedGetTest() throws ApiException {
        String apiToken = null;
        String ref = null;
        List<ComponentControl> response = api.productsRefControlsImplementedGet(apiToken, ref);

        // TODO: test validations
    }
    
    /**
     * Gets a list of all required countermeasures of a product
     *
     * Returns a list of all the required countermeasures of a product. Conditions to be able to perform the action:   - To have the permission **COUNTERMEASURE_VIEW** granted, or   - To have the permission **COUNTERMEASURE_UPDATE** granted. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void productsRefControlsRequiredGetTest() throws ApiException {
        String apiToken = null;
        String ref = null;
        List<ComponentControl> response = api.productsRefControlsRequiredGet(apiToken, ref);

        // TODO: test validations
    }
    
    /**
     * Deletes a product
     *
     * Deletes a product. Conditions to be able to perform the action:   - To have the permission **PRODUCT_DELETE** granted. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void productsRefDeleteTest() throws ApiException {
        String apiToken = null;
        String ref = null;
        api.productsRefDelete(apiToken, ref);

        // TODO: test validations
    }
    
    /**
     * Gets product details
     *
     * Gets the details of a product. Conditions to be able to perform the action:   - No permissions are required to perform this action. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void productsRefGetTest() throws ApiException {
        String apiToken = null;
        String ref = null;
        Product response = api.productsRefGet(apiToken, ref);

        // TODO: test validations
    }
    
    /**
     * Unassigns a list of user groups from a product.
     *
     * Unassigns a list of user groups from a product. Conditions to be able to perform the action:   - To have the permission **PRODUCT_UPDATE** granted. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void productsRefGroupsDeleteTest() throws ApiException {
        String apiToken = null;
        String ref = null;
        JsonData14 jsonData = null;
        InlineResponse200 response = api.productsRefGroupsDelete(apiToken, ref, jsonData);

        // TODO: test validations
    }
    
    /**
     * List all groups assigned to a product
     *
     * List all groups assigned to a product.     Conditions to be able to perform the action:         - If the caller has the PRODUCTS_LIST_ALL permission then all products can be queried without restriction.         - Without the PRODUCTS_LIST_ALL permission, the call will only return the groups if the caller belongs to that product. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void productsRefGroupsGetTest() throws ApiException {
        String apiToken = null;
        String ref = null;
        List<String> response = api.productsRefGroupsGet(apiToken, ref);

        // TODO: test validations
    }
    
    /**
     * Assigns groups of users to a product.
     *
     * Assigns groups of users to a product. Conditions to be able to perform the action:   - To have the permission **PRODUCT_UPDATE** granted. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void productsRefGroupsPutTest() throws ApiException {
        String apiToken = null;
        String ref = null;
        JsonData13 jsonData = null;
        ProductShortGroups response = api.productsRefGroupsPut(apiToken, ref, jsonData);

        // TODO: test validations
    }
    
    /**
     * Updates a product
     *
     * Updates the details of a product. Conditions to be able to perform the action:   - To have the permission **PRODUCT_UPDATE** granted. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void productsRefPutTest() throws ApiException {
        String apiToken = null;
        String ref = null;
        UpdateProduct jsonData = null;
        api.productsRefPut(apiToken, ref, jsonData);

        // TODO: test validations
    }
    
    /**
     * Gets the risks summary of a product
     *
     * This endpoint returns a summary of the risks of a product. Conditions to be able to perform the action:   - No permissions are required to perform this action. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void productsRefRisksGetTest() throws ApiException {
        String apiToken = null;
        String ref = null;
        RiskSummary response = api.productsRefRisksGet(apiToken, ref);

        // TODO: test validations
    }
    
    /**
     * Imports test results from different sources to a product.
     *
     * Imports test results from different sources (OWASP ZAP, Cucumber, Micro Focus Fortify) uploading files. More than one file can be attached to the call. Conditions to be able to perform the action:   - To have the permission **TEST_UPDATE** granted. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void productsRefTestsTestTypeUploadPostTest() throws ApiException {
        String apiToken = null;
        String ref = null;
        String testType = null;
        File fileName = null;
        InlineResponse2011 response = api.productsRefTestsTestTypeUploadPost(apiToken, ref, testType, fileName);

        // TODO: test validations
    }
    
    /**
     * Gets a list of all threats of a product
     *
     * Returns a list of all the threats of a product. Conditions to be able to perform the action:   - To have the permission **THREAT_VIEW** granted, or   - To have the permission **THREAT_UPDATE** granted. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void productsRefThreatsGetTest() throws ApiException {
        String apiToken = null;
        String ref = null;
        List<ComponentUseCaseThreatShort> response = api.productsRefThreatsGet(apiToken, ref);

        // TODO: test validations
    }
    
    /**
     * Unassigns a list of users from a product.
     *
     * Unassign a list of users from a product. Conditions to be able to perform the action:   - To have the permission **PRODUCT_UPDATE** granted. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void productsRefUsersDeleteTest() throws ApiException {
        String apiToken = null;
        String ref = null;
        JsonData16 jsonData = null;
        api.productsRefUsersDelete(apiToken, ref, jsonData);

        // TODO: test validations
    }
    
    /**
     * List all users assigned to a product
     *
     * List all users assigned to a product.     Conditions to be able to perform the action:         - No permissions are required to perform this action. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void productsRefUsersGetTest() throws ApiException {
        String apiToken = null;
        String ref = null;
        List<String> response = api.productsRefUsersGet(apiToken, ref);

        // TODO: test validations
    }
    
    /**
     * Assigns users to a product.
     *
     * Assigns users to a product. Conditions to be able to perform the action:   - To have the permission **PRODUCT_UPDATE** granted. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void productsRefUsersPutTest() throws ApiException {
        String apiToken = null;
        String ref = null;
        JsonData15 jsonData = null;
        ProductShortUsers response = api.productsRefUsersPut(apiToken, ref, jsonData);

        // TODO: test validations
    }
    
    /**
     * Unassigns a user from a product
     *
     * Unassigns a user from a product. Conditions to be able to perform the action:   - To have the permission **PRODUCT_UPDATE** granted. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void productsRefUsersUserDeleteTest() throws ApiException {
        String apiToken = null;
        String ref = null;
        String user = null;
        api.productsRefUsersUserDelete(apiToken, ref, user);

        // TODO: test validations
    }
    
    /**
     * Gets a list of all weaknesses of a product
     *
     * Returns a list of all the weaknesses of a product. Conditions to be able to perform the action:   - To have the permission **THREAT_VIEW** granted, or   - To have the permission **THREAT_UPDATE** granted. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void productsRefWeaknessesGetTest() throws ApiException {
        String apiToken = null;
        String ref = null;
        List<ComponentWeakness> response = api.productsRefWeaknessesGet(apiToken, ref);

        // TODO: test validations
    }
    
    /**
     * Gets a list of all weaknesses of a product filtered by test state
     *
     * Returns a list of all the weaknesses of a product. With the optional parameter &#x60;test_state&#x60; can filter the weakness by test state. Conditions to be able to perform the action:   - To have the permission **THREAT_VIEW** granted, or   - To have the permission **THREAT_UPDATE** granted. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void productsRefWeaknessesTestStateGetTest() throws ApiException {
        String apiToken = null;
        String ref = null;
        String testState = null;
        List<ComponentWeakness> response = api.productsRefWeaknessesTestStateGet(apiToken, ref, testState);

        // TODO: test validations
    }
    
    /**
     * Creates a new product, library or template from a XML file upload.
     *
     * Creates a new product, library or template from a XML file upload. Conditions to be able to perform the action: - To have the permission **PRODUCT_CREATE** granted allows to create a product. - To have the permission **LIBRARY_UPDATE** granted allows to create a library. - To have the permission **TEMPLATE_UPDATE** granted allows to create a template. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void productsUploadPostTest() throws ApiException {
        String apiToken = null;
        String ref = null;
        String name = null;
        File fileName = null;
        String type = null;
        ProductShort response = api.productsUploadPost(apiToken, ref, name, fileName, type);

        // TODO: test validations
    }
    
    /**
     * Updates an existing product from a XML file upload.
     *
     * Updates a product from a XML file upload. Conditions to be able to perform the action: - To have the permission **PRODUCT_UPDATE** granted allows to update a product. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void productsUploadRefPostTest() throws ApiException {
        String apiToken = null;
        String ref = null;
        File fileName = null;
        String deleteCountermeasures = null;
        ProductShort response = api.productsUploadRefPost(apiToken, ref, fileName, deleteCountermeasures);

        // TODO: test validations
    }
    
    /**
     * Executes rules by a product
     *
     * Execute the rules engine for a product and for all components within the product.  If the deleteCountermeasures parameter is true, then threats and countermeasure that no longer apply to the model will automatically be removed.  If it is false, then those threats and countermeasures will remain in the model.   - To have the permission **ARCHITECTURE_UPDATE** granted. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void rulesProductRefPutTest() throws ApiException {
        String apiToken = null;
        String ref = null;
        String deleteCountermeasures = null;
        api.rulesProductRefPut(apiToken, ref, deleteCountermeasures);

        // TODO: test validations
    }
    
}
